# English translations for Nagare
# This is the default/fallback locale

# Error messages
errors:
  # Git errors
  gitNotInitialized: "Not in a git repository"
  gitNotRepo: "Not in a git repository"
  gitNotClean: "Uncommitted changes detected. Cannot proceed with release"
  gitUncommittedChanges: "Uncommitted changes detected. Cannot proceed with release"
  gitUserNotConfigured: "Git user.name and user.email must be configured"
  gitNoCommits: "No commits found since last release"
  gitTagExists: "Tag {tag} already exists"
  gitRemoteError: "Git remote error: {error}"

  # Configuration errors
  configNotFound: "Configuration file not found"
  configInvalid: "Invalid configuration: {error}"
  configMissingRequired: "Missing required configuration: {field}"

  # Version errors
  versionNotFound: "Could not find version in {file}"
  versionInvalidFormat: "Invalid version format: {version}"
  versionFileNotFound: "Version file not found: {path}"
  versionBumpInvalid: "Invalid bump type: {type}"

  # File errors
  fileNotFound: "File not found: {path}"
  fileUpdateFailed: "Failed to update {path}: {error}"
  filePatternNoMatch: "Pattern didn't match in file: {path}"
  fileHandlerNotFound: "No file handler found for {file}"
  fileJsonInvalid: "Invalid JSON in {file}"

  # GitHub errors
  githubCliNotFound: "GitHub CLI (gh) not found"
  githubAuthFailed: "GitHub authentication failed"
  githubReleaseFailed: "Failed to create GitHub release: {error}"

  # Template errors
  templateInvalid: "Invalid template syntax: {error}"
  templateProcessingFailed: "Template processing failed: {error}"
  templateSecurityViolation: "Template contains unsafe code"

  # Security errors
  securityInvalidGitRef: "Invalid {type}: must be a non-empty string"
  securityEmptyGitRef: "Invalid {type}: cannot be empty"
  securityInvalidGitRefChars: "Invalid {type}: contains forbidden characters"
  securityInvalidGitRefPattern: "Invalid {type}: has invalid pattern"
  securityGitTagTooLong: "Git tag exceeds maximum length of {max} characters"
  securityInvalidCommitHash: "Invalid commit hash: must be a 40-character hexadecimal string"
  securityInvalidFilePath: "Invalid file path: {path}"
  securityPathTraversal: "Security violation: path attempts directory traversal"
  securityPathEscape: "Security violation: path escapes base directory"
  securityInvalidVersion: "Invalid version string: {version}"
  securityInvalidSemverFormat: "Version '{version}' doesn't match semantic versioning format"
  securityInvalidCliArgType: "Invalid CLI argument type for '{arg}': expected {expected}, got {actual}"
  securityShellInjection: "Security violation: shell metacharacters detected in {context}"
  securityNullByteInjection: "Security violation: null byte injection attempt"
  securityInvalidPath: "Invalid path: {reason}"
  securityPathNotAbsolute: "Path must be absolute: {path}"
  securityForbiddenChars: "Path contains forbidden characters: {chars}"

  # General errors
  dependencyNotFound: "Required dependency not found: {name}"
  permissionDenied: "Permission denied: {operation}"
  operationCancelled: "Operation cancelled by user"
  unknownError: "An unexpected error occurred: {error}"

  # Legacy/compatibility (keeping original keys)
  invalidBumpType: "Invalid bump type: {type}"
  breakingRequiresMajor: "Cannot use {requested} bump: commits require at least {minimum}"
  commandFailed: "Command failed: {command}"
  noCommits: "No commits found since last release"
  tagExists: "Tag {tag} already exists"
  rollbackFailed: "Failed to rollback: {error}"
  templateError: "Template error: {error}"

# CLI messages
cli:
  release:
    description: "Create a new release"
    calculating: "Calculating version bump from {count} commits..."
    currentVersion: "Current version: {version}"
    newVersion: "New version: {version}"
    updating: "Updating {count} files..."
    committing: "Creating release commit and tag..."
    pushing: "Pushing to remote..."
    creatingGithub: "Creating GitHub release..."
    success: "‚úÖ Released version {version}"
    dryRun: "üîç DRY RUN: Would release version {version}"
    noChanges: "No changes to release"

  rollback:
    description: "Rollback a release"
    confirm: "Are you sure you want to rollback to {version}?"
    rollingBack: "Rolling back to version {version}..."
    restoringFiles: "Restoring {count} files..."
    removingTag: "Removing tag {tag}..."
    success: "‚úÖ Rolled back to version {version}"
    cancelled: "Rollback cancelled"

  init:
    description: "Initialize Nagare in your project"
    creating: "Creating Nagare configuration..."
    success: "‚úÖ Nagare initialized successfully"
    exists: "Nagare is already initialized"
    initializing: "Initializing Nagare in current directory..."
    createdLauncher: "Created nagare-launcher.ts"
    failedLauncher: "Failed to create nagare-launcher.ts: {error}"
    foundConfig: "Found existing nagare.config.ts"
    creatingConfig: "Creating minimal nagare.config.ts..."
    createdConfig: "Created nagare.config.ts"
    failedConfig: "Failed to create nagare.config.ts: {error}"
    checkingDeno: "Checking for deno.json..."
    foundTasks: "Found existing Nagare tasks in deno.json"
    addTasks: "Add these tasks to your deno.json:"
    noDeno: "No deno.json found. Create one with the following content:"
    complete: "Nagare initialization complete!"
    nextSteps: "Next steps:"
    nextStep1: "1. Edit nagare.config.ts to configure your project"
    nextStep2: "2. Add the tasks shown above to your deno.json"
    nextStep3: "3. Run 'deno task release' to create your first release"
    moreInfo: "For more information, visit: {url}"

  commands:
    patch: "Bump patch version (1.0.0 ‚Üí 1.0.1)"
    minor: "Bump minor version (1.0.0 ‚Üí 1.1.0)"
    major: "Bump major version (1.0.0 ‚Üí 2.0.0)"
    auto: "Auto-detect version bump from commits"

  options:
    dryRun: "Preview changes without applying them"
    skipConfirmation: "Skip confirmation prompts"
    skipGithub: "Skip GitHub release creation"
    skipDocs: "Skip documentation generation"
    verbose: "Enable verbose output"
    quiet: "Suppress non-essential output"

  help:
    title: "{name} v{version} - {description}"
    usage: "USAGE:"
    usageLine1: "nagare <command> [options]"
    usageLine2: "nagare release [major|minor|patch] [options]"
    usageLine3: "nagare rollback [version] [options]"

    commands: "COMMANDS:"
    commandRelease: "release    Create a new release (default)"
    commandRollback: "rollback   Rollback a release"
    commandInit: "init       Initialize Nagare in current directory"

    bumpTypes: "BUMP TYPES:"
    bumpMajor: "major      Increment major version (1.0.0 -> 2.0.0)"
    bumpMinor: "minor      Increment minor version (1.0.0 -> 1.1.0)"
    bumpPatch: "patch      Increment patch version (1.0.0 -> 1.0.1)"

    options: "OPTIONS:"
    optionConfig: "--config, -c <path>         Path to configuration file"
    optionDryRun: "--dry-run                   Preview changes without making them"
    optionSkipConfirm: "--skip-confirmation, -y     Skip confirmation prompts"
    optionLogLevel: "--log-level <level>         Set log level (DEBUG, INFO, WARN, ERROR)"
    optionHelp: "--help, -h                  Show this help message"
    optionVersion: "--version, -v               Show version information"
    optionVersionDetailed: "--version-detailed          Show detailed version information"
    optionVersionJson: "--version-json              Show version information in JSON format"

    examples: "EXAMPLES:"
    exampleInit: "nagare init                         # Initialize Nagare in current directory"
    exampleRelease: "nagare release                       # Auto-determine version bump from commits"
    exampleReleaseMinor: "nagare release minor                # Force minor version bump"
    exampleDryRun: "nagare release --dry-run            # Preview release without making changes"
    exampleRollback: "nagare rollback                     # Rollback latest release"
    exampleRollbackVersion: "nagare rollback 1.2.0               # Rollback specific version"
    exampleConfig: "nagare --config ./my-config.ts      # Use custom config file"
    exampleVersionDetailed: "nagare --version-detailed           # Show build info and release notes"
    exampleVersionJson: "nagare --version-json               # Output version info as JSON"

    configuration: "CONFIGURATION:"
    configIntro: "Create a nagare.config.ts file in your project root:"

    safePatterns: "SAFE FILE UPDATE PATTERNS:"
    safePatternsIntro: "Always use line-anchored patterns for JSON files to prevent corruption:"
    safeExample: "‚úÖ SAFE:   /^(\\s*)\"version\":\\s*\"([^\"]+)\"/m"
    unsafeExample: "‚ùå UNSAFE: /\"version\":\\s*\"([^\"]+)\"/"
    safePatternsNote: "The unsafe pattern can match task definitions and corrupt your files."
    safePatternsWarning: "Nagare will warn you if dangerous patterns are detected."

    moreInfo: "For more information, visit: {url}"

  version:
    description: "Description"
    repository: "Repository"
    license: "License"
    buildInfo: "Build Information"
    buildDate: "Build Date"
    gitCommit: "Git Commit"
    environment: "Environment"
    releaseNotes: "Release Notes (v{version} - {date})"
    added: "Added"
    changed: "Changed"
    fixed: "Fixed"
    deprecated: "Deprecated"
    removed: "Removed"
    security: "Security"
    runtimeInfo: "Runtime Information"
    deno: "Deno"
    v8: "V8"
    typescript: "TypeScript"

# Log messages
log:
  release:
    starting: "üöÄ Starting release process with Nagare..."
    noFiles: "üìÑ No additional files configured for updates"
    fileUpdatePreview: "üìÑ File Update Preview:"
    filePreview: "File: {path}"
    usingHandler: "üì¶ Using built-in {handler} handler"
    customFunction: "‚úÖ Uses custom update function"
    noChanges: "No changes"
    foundMatch: "‚úÖ Line {line}: \"{before}\" ‚Üí \"{after}\""
    noMatches: "‚ùå No version references found to update"
    suggestions: "üí° Configuration suggestions:"
    suggestBuiltin: "‚úÖ {path} will use built-in {handler} handler automatically"
    currentVersion: "üì¶ Current version: {version}"
    noCommits: "No commits found since last release"
    commitsFound: "üìù Found {count} commits since last release"
    newVersion: "üìà New version: {version}"
    releaseNotes: "üìã Release Notes Preview:"
    dryRunMode: "üîç DRY RUN MODE - Previewing all changes..."
    dryRunInfo: "üèÉ Dry run mode - no changes will be made"
    updatingFiles: "üìù Updating {count} files..."
    generatingChangelog: "üìã Generating changelog..."
    committingChanges: "üì¶ Committing changes and creating tag..."
    pushingToRemote: "üöÄ Pushing to remote..."
    creatingGitHub: "üêô Creating GitHub release..."
    gitHubSuccess: "‚úÖ GitHub release created: {url}"
    generatingDocs: "üìö Generating documentation..."
    releaseSuccess: "‚úÖ Successfully released version {version}"
    releaseUrl: "üéâ View release at: {url}"
    noFilesToUpdate: "‚ÑπÔ∏è  No files configured for updates"
    processingFiles: "üìÑ Processing file updates..."

  rollback:
    starting: "üîÑ Starting rollback to version {version}..."
    noReleaseTags: "No release tags found"
    availableTags: "Available tags: {tags}"
    targetNotFound: "Target version {version} not found"
    rollingBack: "Rolling back to {version}..."
    restoringFiles: "üìù Restoring {count} files..."
    removingTag: "üè∑Ô∏è  Removing tag {tag}..."
    removingGitHub: "üêô Removing GitHub release..."
    success: "‚úÖ Successfully rolled back to {version}"

  # Logging levels
  error: "ERROR"
  warn: "WARN"
  info: "INFO"
  debug: "DEBUG"

# Prompts
prompts:
  confirm: "Proceed? (y/n)"
  yes: "y"
  no: "n"
  proceedRelease: "Proceed with release?"
  releaseCancelled: "Release cancelled"
  undoRollback: "This will undo release changes. Continue?"
  rollbackCancelled: "Rollback cancelled"
  deleteRemoteTag: "Remote tag {tag} exists. Delete it?"

# Suggestions for error recovery
suggestions:
  checkPath: "Check that the file path is correct"
  verifyPermissions: "Verify you have read permissions for the file"
  runGitInit: "Run 'git init' to initialize a repository"
  navigateToRepo: "Navigate to an existing git repository"
  checkProjectDir: "If you just cloned, ensure you're in the project directory"
  commitChanges: 'Commit your changes: git add . && git commit -m "your message"'
  stashChanges: "Stash changes temporarily: git stash"
  discardChanges: "Discard changes: git checkout . (‚ö†Ô∏è  destructive)"
  viewChanges: "View changes: git status"
  runNagareInit: "Run 'nagare init' to create a configuration file"
  createConfigManually: "Create nagare.config.ts manually"
  specifyConfigPath: "Specify a custom config path: nagare release --config ./path/to/config.ts"
  addVersionPattern: "Add a version to your file matching one of the common patterns"
  configureCustomPattern: "Configure a custom pattern in your nagare.config.ts"
  ensureFileReadable: "Ensure the version file exists and is readable"
  addCustomUpdateFn: "Add a custom updateFn in your nagare.config.ts"
  useBuiltInHandler: "Use a built-in handler by renaming to a standard file name"
  defineCustomPatterns: "Define custom patterns for this file type"
  checkJsonSyntax: "Check for syntax errors in the JSON file"
  validateJson: "Validate JSON at jsonlint.com"
  checkJsonCommas: "Ensure no trailing commas or missing quotes"
  revertRecentChanges: "Revert recent changes if the file was working before"
  installGitHubCli: "Install GitHub CLI: https://cli.github.com/manual/installation"
  installGitHubCliMac: "macOS: brew install gh"
  installGitHubCliWindows: "Windows: winget install --id GitHub.cli"
  disableGitHubReleases: "Or disable GitHub releases in nagare.config.ts: github.createRelease = false"
  useValidType: "Use one of the valid bump types: major, minor, patch"
  checkGitHub: "Ensure GitHub CLI is installed and authenticated"
  checkConfig: "Verify your nagare.config.ts file is valid"
  provideValidString: "Provide a valid {type} as a string"
  checkNotNull: "Check that the value is not null or undefined"
  ensureNotNumberOrObject: "Ensure the value is not a number or object"
  provideNonEmpty: "Provide a non-empty {type} name"
  checkWhitespace: "Check for accidental whitespace-only values"
  useSimpleNames: "Use simple names without special characters"
  useOnlyAlphanumeric: "Use only alphanumeric characters, hyphens, and underscores"
  avoidSpecialChars: "Avoid special characters like {chars}"
  checkGitDocs: "Check git documentation for valid {type} naming"
  followGitNaming: "Follow git naming conventions"
  useShorterName: "Use a shorter name (max {max} characters)"
  provideFullHash: "Provide the full 40-character commit hash"
  checkGitLog: "Use 'git log --oneline' to find valid commit hashes"
  useAbsolutePath: "Use an absolute path starting with /"
  removeTraversal: "Remove '..' and similar path traversal attempts"
  stayWithinProject: "Ensure the path stays within your project directory"
  useForwardSlashes: "Use forward slashes (/) for path separators"
  checkPathExists: "Verify the path exists and is accessible"
  provideSemver: "Provide a valid semantic version (e.g., 1.2.3)"
  checkVersionFormat: "Check format: major.minor.patch (e.g., 1.0.0)"
  removeInvalidChars: "Remove invalid characters from version string"
  # Missing suggestion keys found in codebase
  provideValidGitRef: "Provide a valid git reference as a string"
  checkNotNullOrUndefined: "Check that the value is not null or undefined"
  ensureStringType: "Ensure the value is a string type"
  removeSpecialChars: "Remove special characters from the value"
  useAlphanumeric: "Use only alphanumeric characters"
  noStartWithHyphen: "Git references cannot start with a hyphen"
  removeDoubleDots: "Remove consecutive dots (..) from the reference"
  noEndWithDotOrLock: "References cannot end with '.' or '.lock'"
  removeAtBraces: "Remove '@' symbols and curly braces"
  useConciseNaming: "Use concise and descriptive names"
  useAbbreviatedVersions: "Consider using abbreviated version names"
  checkForNullUndefined: "Check for null or undefined values"
  checkInputSource: "Verify the input source is correct"
  convertNumbersToStrings: "Convert numeric values to strings"
  ensureStringArgs: "Ensure all arguments are strings"
  escapeSpecialChars: "Escape special characters properly"
  forbiddenChars: "Remove forbidden characters: {chars}"
  provideValidPath: "Provide a valid file system path"
  removeNullBytes: "Remove null bytes from the input"
  removeShellMetachars: "Remove shell metacharacters for security"
  checkSemverDocs: "Check semantic versioning documentation"
  checkSymbolicLinks: "Check for symbolic link issues"
  useGitRevParse: "Use 'git rev-parse' to resolve references"
  useParamSubstitution: "Use parameter substitution for safety"
  useRelativePaths: "Consider using relative paths"
  useSemverFormat: "Use semantic versioning format (major.minor.patch)"
  validateEncoding: "Validate character encoding"
  validSemverExamples: "Valid examples: 1.0.0, 2.1.3, 0.1.0-beta"

# Changelog sections
changelog:
  title: "Changelog"
  unreleased: "Unreleased"
  added: "Added"
  changed: "Changed"
  deprecated: "Deprecated"
  removed: "Removed"
  fixed: "Fixed"
  security: "Security"
  breakingChanges: "BREAKING CHANGES"

# Git commit types
commitTypes:
  feat: "Features"
  fix: "Bug Fixes"
  docs: "Documentation"
  style: "Styles"
  refactor: "Code Refactoring"
  perf: "Performance Improvements"
  test: "Tests"
  build: "Build System"
  ci: "Continuous Integration"
  chore: "Chores"
  revert: "Reverts"

# File handler messages
fileHandlers:
  updating: "Updating {path}"
  skipping: "Skipping {path} (no changes needed)"
  preview: "Would update {path}"
  pattern: "Using pattern: {pattern}"
  customHandler: "Using custom handler for {path}"

# Version info
version:
  current: "Current version: {version}"
  previous: "Previous version: {version}"
  bump: "Version bump: {from} ‚Üí {to}"

# Git messages
git:
  status: "Checking git status..."
  clean: "Working directory is clean"
  uncommitted: "Found uncommitted changes"
  tag: "Creating tag {tag}"
  commit: "Creating commit: {message}"
  push: "Pushing to {remote}"

# Time/Date
time:
  just_now: "just now"
  seconds_ago: "{count} seconds ago"
  minutes_ago: "{count} minutes ago"
  hours_ago: "{count} hours ago"
  days_ago: "{count} days ago"
