# Japanese translations for Nagare
# 日本語翻訳

# エラーメッセージ
errors:
  # Gitエラー
  gitNotInitialized: "Gitリポジトリではありません"
  gitNotRepo: "Gitリポジトリではありません"
  gitNotClean: "コミットされていない変更があります。リリースを続行できません"
  gitUncommittedChanges: "コミットされていない変更があります。リリースを続行できません"
  gitUserNotConfigured: "Gitユーザーが設定されていません"
  gitNoCommits: "前回のリリース以降のコミットが見つかりません"
  gitTagExists: "タグ {tag} は既に存在します"
  gitRemoteError: "Gitリモートエラー: {error}"

  # 設定エラー
  configNotFound: "設定ファイルが見つかりません"
  configInvalid: "無効な設定: {error}"
  configMissingRequired: "必須設定が不足しています: {field}"

  # バージョンエラー
  versionNotFound: "{file} でバージョンが見つかりません"
  versionInvalidFormat: "無効なバージョン形式: {version}"
  versionFileNotFound: "バージョンファイルが見つかりません: {path}"
  versionBumpInvalid: "無効なバンプタイプ: {type}"

  # ファイルエラー
  fileNotFound: "ファイルが見つかりません: {path}"
  fileUpdateFailed: "{path} の更新に失敗しました: {error}"
  filePatternNoMatch: "ファイル内でパターンが一致しません: {path}"
  fileHandlerNotFound: "{file} のファイルハンドラーが見つかりません"
  fileJsonInvalid: "{file} に無効なJSONがあります"

  # GitHubエラー
  githubCliNotFound: "GitHub CLI (gh) が見つかりません"
  githubAuthFailed: "GitHub認証に失敗しました"
  githubReleaseFailed: "GitHubリリースの作成に失敗しました: {error}"

  # テンプレートエラー
  templateInvalid: "無効なテンプレート構文: {error}"
  templateProcessingFailed: "テンプレート処理に失敗しました: {error}"
  templateSecurityViolation: "テンプレートに安全でないコードが含まれています"

  # セキュリティエラー
  securityInvalidGitRef: "無効なGit参照: {ref}"
  securityEmptyGitRef: "Git参照は空にできません"
  securityInvalidGitRefChars: "Git参照に禁止文字が含まれています"
  securityInvalidGitRefPattern: "Git参照のパターンが無効です"
  securityGitTagTooLong: "Gitタグが最大長を超えています"
  securityInvalidCommitHash: "無効なGitコミットハッシュ: {hash}"
  securityInvalidFilePath: "無効なファイルパス: {path}"
  securityPathTraversal: "ディレクトリトラバーサルの試みを検出しました"
  securityPathEscape: "パスがベースディレクトリを超えています"
  securityInvalidVersion: "無効なバージョン文字列: {version}"
  securityInvalidSemverFormat: "バージョンがsemver形式と一致しません"
  securityInvalidCliArgType: "無効なCLI引数タイプ"
  securityShellInjection: "シェルメタ文字が検出されました"
  securityNullByteInjection: "ヌルバイトインジェクションの試み"
  securityInvalidPath: "無効なパス: {reason}"
  securityPathNotAbsolute: "パスは絶対パスである必要があります: {path}"
  securityForbiddenChars: "パスに禁止文字が含まれています: {chars}"
  securityInvalidTemplate: "無効なテンプレート構文"
  securityTemplateInjection: "テンプレートインジェクションの試み"
  securityInvalidChangelogEntry: "無効な変更履歴エントリ"
  securityInvalidCommitMessage: "無効なコミットメッセージ形式"
  securityInvalidGitCommand: "無効なGitコマンド"
  securityGitCommandInjection: "Gitコマンドインジェクションの試み"
  securityInvalidRemoteName: "無効なリモート名: {name}"
  securityInvalidGitBranch: "無効なGitブランチ名: {branch}"
  securityInvalidConfigValue: "無効な設定値"
  securityConfigInjection: "設定インジェクションの試み"
  securityInvalidUpdateFunction: "更新関数が安全でないコードを含んでいます"
  securityInvalidJsonValue: "無効なJSON値"
  securityJsonInjection: "JSONインジェクションの試み"
  securityInvalidYamlValue: "無効なYAML値"
  securityYamlInjection: "YAMLインジェクションの試み"
  securityInvalidEnvVar: "無効な環境変数名: {name}"
  securityEnvVarInjection: "環境変数インジェクションの試み"
  securityInvalidUrl: "無効なURL: {url}"
  securitySsrfAttempt: "SSRFの試みを検出しました"
  securityInvalidRegex: "無効な正規表現パターン"
  securityRegexDos: "ReDoSの脆弱性を検出しました"
  securityInvalidFileContent: "ファイルに安全でないコンテンツが含まれています"
  securityBinaryExecution: "バイナリ実行の試み"
  securityInvalidFileHandle: "ファイルハンドルが無効または破損しています"
  securityRaceCondition: "競合状態を検出しました"
  securityInvalidPermissions: "ファイル権限が安全ではありません"
  securitySymlinkAttack: "シンボリックリンク攻撃の試み"
  securityDirectoryListingAttempt: "ディレクトリリスティングの試み"
  securityInvalidInputStream: "入力ストリームが安全ではありません"
  securityInvalidOutputStream: "出力ストリームが安全ではありません"
  securityMemoryLeak: "メモリリークの可能性を検出しました"
  securityInfiniteLoop: "無限ループの可能性を検出しました"
  securityStackOverflow: "スタックオーバーフローの可能性"
  securityHeapOverflow: "ヒープオーバーフローの可能性"
  securityBufferOverflow: "バッファオーバーフローの可能性"
  securityIntegerOverflow: "整数オーバーフローの可能性"
  securityDivisionByZero: "ゼロ除算の試み"
  securityNullDereference: "ヌルポインタ参照"
  securityUseAfterFree: "解放後使用の検出"
  securityDoubleVFree: "二重解放の検出"
  securityResourceExhaustion: "リソース枯渇攻撃の可能性"
  securityTimingAttack: "タイミング攻撃の脆弱性"
  securitySideChannel: "サイドチャネル攻撃の可能性"
  securityInsecureRandom: "安全でない乱数生成"
  securityWeakCrypto: "弱い暗号アルゴリズムの使用"
  securityHardcodedSecret: "ハードコードされた秘密情報"
  securityInsecureStorage: "安全でないデータ保存"
  securityMissingEncryption: "暗号化が必要です"
  securityInsecureProtocol: "安全でないプロトコルの使用"
  securityMissingAuth: "認証が必要です"
  securityWeakAuth: "弱い認証メカニズム"
  securityMissingAuthz: "認可チェックが不足しています"
  securityPrivilegeEscalation: "権限昇格の試み"
  securityInsecureDefaults: "安全でないデフォルト設定"
  securityMissingValidation: "入力検証が不足しています"
  securityMissingSanitization: "出力サニタイゼーションが不足しています"
  securityOpenRedirect: "オープンリダイレクトの脆弱性"
  securityXxe: "XMLエンティティ展開攻撃"
  securityDeserialize: "安全でないデシリアライゼーション"
  securityLdapInjection: "LDAPインジェクション"
  securityXpathInjection: "XPathインジェクション"
  securityCodeExecution: "任意コード実行の可能性"
  securityMaliciousPayload: "悪意のあるペイロードを検出しました"

  # 一般エラー
  dependencyNotFound: "必要な依存関係が見つかりません: {name}"
  permissionDenied: "権限が拒否されました: {operation}"
  operationCancelled: "ユーザーによって操作がキャンセルされました"
  unknownError: "予期しないエラーが発生しました: {error}"

  # レガシー/互換性（元のキーを保持）
  invalidBumpType: "無効なバンプタイプ: {type}"
  breakingRequiresMajor: "{requested}バンプは使用できません: コミットには最低でも{minimum}が必要です"
  commandFailed: "コマンドが失敗しました: {command}"
  noCommits: "前回のリリース以降のコミットが見つかりません"
  tagExists: "タグ {tag} は既に存在します"
  rollbackFailed: "ロールバックに失敗しました: {error}"
  templateError: "テンプレートエラー: {error}"

# CLIメッセージ
cli:
  release:
    description: "新しいリリースを作成"
    calculating: "{count}個のコミットからバージョンバンプを計算中..."
    currentVersion: "現在のバージョン: {version}"
    newVersion: "新しいバージョン: {version}"
    updating: "{count}個のファイルを更新中..."
    committing: "リリースコミットとタグを作成中..."
    pushing: "リモートにプッシュ中..."
    creatingGithub: "GitHubリリースを作成中..."
    success: "✅ バージョン {version} をリリースしました"
    dryRun: "🔍 ドライラン: バージョン {version} をリリースする予定"
    noChanges: "リリースする変更がありません"

  rollback:
    description: "リリースをロールバック"
    confirm: "本当にバージョン {version} にロールバックしますか？"
    rollingBack: "バージョン {version} にロールバック中..."
    restoringFiles: "{count}個のファイルを復元中..."
    removingTag: "タグ {tag} を削除中..."
    success: "✅ バージョン {version} にロールバックしました"
    cancelled: "ロールバックがキャンセルされました"

  init:
    description: "プロジェクトでNagareを初期化"
    creating: "Nagare設定を作成中..."
    success: "✅ Nagareが正常に初期化されました"
    exists: "Nagareは既に初期化されています"
    initializing: "現在のディレクトリでNagareを初期化しています..."
    createdLauncher: "nagare-launcher.tsを作成しました"
    failedLauncher: "nagare-launcher.tsの作成に失敗しました: {error}"
    foundConfig: "既存のnagare.config.tsが見つかりました"
    creatingConfig: "最小限のnagare.config.tsを作成中..."
    createdConfig: "nagare.config.tsを作成しました"
    failedConfig: "nagare.config.tsの作成に失敗しました: {error}"
    checkingDeno: "deno.jsonを確認中..."
    foundTasks: "deno.jsonに既存のNagareタスクが見つかりました"
    addTasks: "以下のタスクをdeno.jsonに追加してください："
    noDeno: "deno.jsonが見つかりません。以下の内容で作成してください："
    complete: "Nagareの初期化が完了しました！"
    nextSteps: "次のステップ："
    nextStep1: "1. nagare.config.tsを編集してプロジェクトを設定"
    nextStep2: "2. 上記のタスクをdeno.jsonに追加"
    nextStep3: "3. 'deno task release'を実行して最初のリリースを作成"
    moreInfo: "詳細情報: {url}"

  commands:
    patch: "パッチバージョンをバンプ (1.0.0 → 1.0.1)"
    minor: "マイナーバージョンをバンプ (1.0.0 → 1.1.0)"
    major: "メジャーバージョンをバンプ (1.0.0 → 2.0.0)"
    auto: "コミットから自動的にバージョンバンプを検出"

  options:
    dryRun: "変更を適用せずにプレビュー"
    skipConfirmation: "確認プロンプトをスキップ"
    skipGithub: "GitHubリリース作成をスキップ"
    skipDocs: "ドキュメント生成をスキップ"
    verbose: "詳細出力を有効化"
    quiet: "必須でない出力を抑制"

  help:
    title: "{name} v{version} - {description}"
    usage: "使用方法:"
    usageLine1: "nagare <command> [options]"
    usageLine2: "nagare release [major|minor|patch] [options]"
    usageLine3: "nagare rollback [version] [options]"

    commands: "コマンド:"
    commandRelease: "release    新しいリリースを作成 (デフォルト)"
    commandRollback: "rollback   リリースをロールバック"
    commandInit: "init       現在のディレクトリでNagareを初期化"

    bumpTypes: "バンプタイプ:"
    bumpMajor: "major      メジャーバージョンをインクリメント (1.0.0 -> 2.0.0)"
    bumpMinor: "minor      マイナーバージョンをインクリメント (1.0.0 -> 1.1.0)"
    bumpPatch: "patch      パッチバージョンをインクリメント (1.0.0 -> 1.0.1)"

    options: "オプション:"
    optionConfig: "--config, -c <path>         設定ファイルへのパス"
    optionDryRun: "--dry-run                   変更を適用せずにプレビュー"
    optionSkipConfirm: "--skip-confirmation, -y     確認プロンプトをスキップ"
    optionLogLevel: "--log-level <level>         ログレベルを設定 (DEBUG, INFO, WARN, ERROR)"
    optionHelp: "--help, -h                  このヘルプメッセージを表示"
    optionVersion: "--version, -v               バージョン情報を表示"
    optionVersionDetailed: "--version-detailed          詳細なバージョン情報を表示"
    optionVersionJson: "--version-json              JSON形式でバージョン情報を表示"

    examples: "例:"
    exampleInit: "nagare init                         # 現在のディレクトリでNagareを初期化"
    exampleRelease: "nagare release                       # コミットから自動的にバージョンバンプを決定"
    exampleReleaseMinor: "nagare release minor                # マイナーバージョンバンプを強制"
    exampleDryRun: "nagare release --dry-run            # 変更を行わずにリリースをプレビュー"
    exampleRollback: "nagare rollback                     # 最新のリリースをロールバック"
    exampleRollbackVersion: "nagare rollback 1.2.0               # 特定のバージョンをロールバック"
    exampleConfig: "nagare --config ./my-config.ts      # カスタム設定ファイルを使用"
    exampleVersionDetailed: "nagare --version-detailed           # ビルド情報とリリースノートを表示"
    exampleVersionJson: "nagare --version-json               # バージョン情報をJSONとして出力"

    configuration: "設定:"
    configIntro: "プロジェクトのルートにnagare.config.tsファイルを作成:"

    safePatterns: "安全なファイル更新パターン:"
    safePatternsIntro: "JSONファイルの破損を防ぐため、常に行頭アンカーパターンを使用してください:"
    safeExample: "✅ 安全:   /^(\\s*)\"version\":\\s*\"([^\"]+)\"/m"
    unsafeExample: "❌ 危険: /\"version\":\\s*\"([^\"]+)\"/"
    safePatternsNote: "危険なパターンはタスク定義にマッチしてファイルを破損する可能性があります。"
    safePatternsWarning: "Nagareは危険なパターンが検出された場合に警告します。"

    moreInfo: "詳細情報: {url}"

  version:
    description: "説明"
    repository: "リポジトリ"
    license: "ライセンス"
    buildInfo: "ビルド情報"
    buildDate: "ビルド日時"
    gitCommit: "Gitコミット"
    environment: "環境"
    releaseNotes: "リリースノート (v{version} - {date})"
    added: "追加"
    changed: "変更"
    fixed: "修正"
    deprecated: "非推奨"
    removed: "削除"
    security: "セキュリティ"
    runtimeInfo: "ランタイム情報"
    deno: "Deno"
    v8: "V8"
    typescript: "TypeScript"

# プロンプト
prompts:
  confirm: "続行しますか？ (y/n)"
  yes: "y"
  no: "n"
  proceedRelease: "リリースを続行しますか？"
  releaseCancelled: "リリースがキャンセルされました"
  undoRollback: "リリースの変更を元に戻します。続行しますか？"
  rollbackCancelled: "ロールバックがキャンセルされました"
  deleteRemoteTag: "リモートタグ {tag} が存在します。削除しますか？"

# エラー回復の提案
suggestions:
  checkPath: "ファイルパスが正しいか確認してください"
  verifyPermissions: "ファイルの読み取り権限があることを確認してください"
  runGitInit: "'git init' を実行してリポジトリを初期化してください"
  navigateToRepo: "既存のGitリポジトリに移動してください"
  checkProjectDir: "クローンした場合は、プロジェクトディレクトリにいることを確認してください"
  commitChanges: '変更をコミットしてください: git add . && git commit -m "メッセージ"'
  stashChanges: "変更を一時的にスタッシュ: git stash"
  discardChanges: "変更を破棄: git checkout . (⚠️ 破壊的)"
  viewChanges: "変更を確認: git status"
  runNagareInit: "'nagare init' を実行して設定ファイルを作成してください"
  createConfigManually: "nagare.config.ts を手動で作成してください"
  specifyConfigPath: "カスタム設定パスを指定: nagare release --config ./path/to/config.ts"
  addVersionPattern: "一般的なパターンに一致するバージョンをファイルに追加してください"
  configureCustomPattern: "nagare.config.ts でカスタムパターンを設定してください"
  ensureFileReadable: "バージョンファイルが存在し、読み取り可能であることを確認してください"
  addCustomUpdateFn: "nagare.config.ts にカスタム updateFn を追加してください"
  useBuiltInHandler: "標準的なファイル名に変更して組み込みハンドラーを使用してください"
  defineCustomPatterns: "このファイルタイプのカスタムパターンを定義してください"
  checkJsonSyntax: "JSONファイルの構文エラーを確認してください"
  validateJson: "jsonlint.com でJSONを検証してください"
  checkJsonCommas: "末尾のカンマや引用符の欠落がないことを確認してください"
  revertRecentChanges: "ファイルが以前動作していた場合は、最近の変更を元に戻してください"
  installGitHubCli: "GitHub CLIをインストール: https://cli.github.com/manual/installation"
  installGitHubCliMac: "macOS: brew install gh"
  installGitHubCliWindows: "Windows: winget install --id GitHub.cli"
  disableGitHubReleases: "または nagare.config.ts で GitHubリリースを無効化: github.createRelease = false"
  useValidType: "有効なバンプタイプを使用してください: major, minor, patch"
  checkGitHub: "GitHub CLIがインストールされ、認証されていることを確認してください"
  checkConfig: "nagare.config.tsファイルが有効であることを確認してください"
  # Validation suggestions
  checkSemverFormat: "バージョンがセマンティックバージョン形式 (例: 1.2.3) に従っていることを確認してください"
  useStandardVersionFormat: "標準的なバージョン形式を使用してください: MAJOR.MINOR.PATCH"
  avoidSpecialCharsInVersion: "バージョン文字列に特殊文字を使用しないでください"
  useValidBumpType: "有効なバンプタイプを使用してください: major, minor, または patch"
  checkCommitFormat: "コミットが従来型コミット形式に従っていることを確認してください"
  useConventionalCommits: "コミットメッセージには従来型コミット形式を使用してください: type(scope): description"
  # Path suggestions
  useAbsolutePaths: "相対パスではなく絶対パスを使用してください"
  avoidPathTraversal: "ファイルパスに .. や . を使用しないでください"
  checkFileExists: "ファイルが存在し、アクセス可能であることを確認してください"
  verifyWritePermissions: "ディレクトリへの書き込み権限があることを確認してください"
  createParentDirectory: "親ディレクトリが存在しない場合は作成してください"
  checkSymlinkTarget: "シンボリックリンクが有効なターゲットを指していることを確認してください"
  # Git suggestions
  configureGitUser: "'git config user.name' と 'git config user.email' を設定してください"
  fetchLatestChanges: "'git fetch' で最新の変更を取得してください"
  pullBeforeRelease: "リリース前に 'git pull' を実行してください"
  checkBranchStatus: "'git status' で現在のブランチの状態を確認してください"
  switchToMainBranch: "'git checkout main' でメインブランチに切り替えてください"
  createFeatureBranch: "新しい機能には 'git checkout -b feature/name' でブランチを作成してください"
  rebaseOnMain: "'git rebase main' で最新のメインブランチに基づいて更新してください"
  checkRemoteConnection: "'git remote -v' でリモートリポジトリへの接続を確認してください"
  pushWithTags: "'git push --tags' でタグもプッシュしてください"
  deleteLocalTag: "'git tag -d tagname' でローカルタグを削除してください"
  deleteRemoteTag: "'git push origin :refs/tags/tagname' でリモートタグを削除してください"
  # Version suggestions
  checkVersionConsistency: "すべてのファイルでバージョンが一致していることを確認してください"
  updateAllVersionFiles: "すべてのバージョンファイルを同時に更新してください"
  validateVersionBump: "バージョンバンプが意味的に正しいことを確認してください"
  considerBreakingChanges: "破壊的変更にはメジャーバージョンバンプを使用してください"
  documentVersionChange: "CHANGELOGにバージョン変更を記載してください"
  tagVersionRelease: "リリースにはバージョンタグを作成してください"
  # General recovery suggestions
  restoreFromBackup: "バックアップからファイルを復元してください"
  checkLogFiles: "詳細情報についてログファイルを確認してください"
  runInDebugMode: "'--log-level DEBUG' でデバッグモードで実行してください"
  reportBugIfPersists: "問題が続く場合は、バグレポートを提出してください"
  consultDocumentation: "詳細についてはドキュメントを参照してください"
  seekCommunityHelp: "コミュニティフォーラムで助けを求めてください"
  # Security suggestions
  validateAllInputs: "すべての入力を検証してください"
  sanitizeUserInput: "ユーザー入力をサニタイズしてください"
  useSecureDefaults: "セキュアなデフォルト設定を使用してください"
  enableAuthentication: "認証を有効にしてください"
  implementAuthorization: "適切な認可チェックを実装してください"
  encryptSensitiveData: "機密データを暗号化してください"
  useHttps: "HTTP ではなく HTTPS を使用してください"
  validateCertificates: "SSL/TLS証明書を検証してください"
  rotateCredentials: "定期的に認証情報をローテーションしてください"
  auditSecuritySettings: "セキュリティ設定を監査してください"
  # File operation suggestions
  closeFileHandles: "使用後はファイルハンドルを閉じてください"
  useAtomicOperations: "重要な更新にはアトミック操作を使用してください"
  implementFileBackup: "更新前にファイルをバックアップしてください"
  validateFileFormat: "ファイル形式が正しいことを確認してください"
  checkDiskSpace: "十分なディスク容量があることを確認してください"
  handleConcurrentAccess: "並行アクセスを適切に処理してください"

# 変更履歴セクション
changelog:
  title: "変更履歴"
  unreleased: "未リリース"
  added: "追加"
  changed: "変更"
  deprecated: "非推奨"
  removed: "削除"
  fixed: "修正"
  security: "セキュリティ"
  breakingChanges: "破壊的変更"

# Gitコミットタイプ
commitTypes:
  feat: "機能"
  fix: "バグ修正"
  docs: "ドキュメント"
  style: "スタイル"
  refactor: "リファクタリング"
  perf: "パフォーマンス改善"
  test: "テスト"
  build: "ビルドシステム"
  ci: "継続的インテグレーション"
  chore: "雑務"
  revert: "取り消し"

# ログメッセージ
log:
  release:
    starting: "🚀 Nagareでリリースプロセスを開始しています..."
    noFiles: "📄 更新用の追加ファイルは設定されていません"
    fileUpdatePreview: "📄 ファイル更新プレビュー:"
    filePreview: "ファイル: {path}"
    usingHandler: "📦 組み込み{handler}ハンドラーを使用"
    customFunction: "✅ カスタム更新関数を使用"
    noChanges: "変更なし"
    foundMatch: "✅ {line}行目: \"{before}\" → \"{after}\""
    noMatches: "❌ 更新するバージョン参照が見つかりません"
    suggestions: "💡 設定の提案:"
    suggestBuiltin: "✅ {path}は自動的に組み込み{handler}ハンドラーを使用します"
    currentVersion: "📦 現在のバージョン: {version}"
    noCommits: "前回のリリース以降のコミットが見つかりません"
    commitsFound: "📝 前回のリリース以降に{count}個のコミットが見つかりました"
    newVersion: "📈 新しいバージョン: {version}"
    releaseNotes: "📋 リリースノートプレビュー:"
    dryRunMode: "🔍 ドライランモード - すべての変更をプレビューしています..."
    dryRunInfo: "🏃 ドライランモード - 変更は行われません"
    updatingFiles: "📝 {count}個のファイルを更新中..."
    generatingChangelog: "📋 変更履歴を生成中..."
    committingChanges: "📦 変更をコミットしてタグを作成中..."
    pushingToRemote: "🚀 リモートにプッシュ中..."
    creatingGitHub: "🐙 GitHubリリースを作成中..."
    gitHubSuccess: "✅ GitHubリリースが作成されました: {url}"
    generatingDocs: "📚 ドキュメントを生成中..."
    releaseSuccess: "✅ バージョン{version}が正常にリリースされました"
    releaseUrl: "🎉 リリースを確認: {url}"
    noFilesToUpdate: "ℹ️  更新用のファイルが設定されていません"
    processingFiles: "📄 ファイル更新を処理中..."

  rollback:
    starting: "🔄 バージョン{version}へのロールバックを開始しています..."
    noReleaseTags: "リリースタグが見つかりません"
    availableTags: "利用可能なタグ: {tags}"
    targetNotFound: "ターゲットバージョン{version}が見つかりません"
    rollingBack: "{version}にロールバック中..."
    restoringFiles: "📝 {count}個のファイルを復元中..."
    removingTag: "🏷️  タグ{tag}を削除中..."
    removingGitHub: "🐙 GitHubリリースを削除中..."
    success: "✅ バージョン{version}に正常にロールバックしました"

  error: "エラー"
  warn: "警告"
  info: "情報"
  debug: "デバッグ"

# ファイルハンドラーメッセージ
fileHandlers:
  updating: "{path} を更新中"
  skipping: "{path} をスキップ (変更不要)"
  preview: "{path} を更新予定"
  pattern: "使用パターン: {pattern}"
  customHandler: "{path} にカスタムハンドラーを使用"

# バージョン情報
version:
  current: "現在のバージョン: {version}"
  previous: "以前のバージョン: {version}"
  bump: "バージョンバンプ: {from} → {to}"

# Gitメッセージ
git:
  status: "Gitステータスを確認中..."
  clean: "作業ディレクトリはクリーンです"
  uncommitted: "コミットされていない変更が見つかりました"
  tag: "タグ {tag} を作成中"
  commit: "コミットを作成中: {message}"
  push: "{remote} にプッシュ中"

# 時間/日付
time:
  just_now: "たった今"
  seconds_ago: "{count}秒前"
  minutes_ago: "{count}分前"
  hours_ago: "{count}時間前"
  days_ago: "{count}日前"
